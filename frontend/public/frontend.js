// start of code generated by ChatGPT
let selectedRooms = [];
let allRooms = [];
let queryResult= [];

window.onload = async () => {
	try {
		const response = await fetch("./data/rooms.json");
		if (!response.ok) {
			throw new Error("Failed to load campus data");
		}
		const data = await response.json();
		allRooms = data.allRooms;

		populateBuildingDropdown(allRooms);
		populateAvailableRooms(allRooms);
		initMap(allRooms);
	} catch (err) {
		console.error(err);
	}
};

function populateBuildingDropdown(rooms) {
	const dropdown = document.getElementById("buildingDropdown");
	dropdown.innerHTML = ""; // clear old options

	const buildingMap = new Map();

	rooms.forEach(room => {
		if (!buildingMap.has(room.shortname)) {
			buildingMap.set(room.shortname, room.fullname);
		}
	});

	const sortedEntries = Array.from(buildingMap.entries()).sort((a, b) =>
		a[1].localeCompare(b[1])
	);

	// Add "All Buildings" option
	const allOption = document.createElement("option");
	allOption.value = "";
	allOption.textContent = "All Buildings";
	dropdown.appendChild(allOption);

	sortedEntries.forEach(([shortname, fullname]) => {
		const option = document.createElement("option");
		option.value = shortname;
		option.textContent = `${fullname} (${shortname})`;
		dropdown.appendChild(option);
	});

	dropdown.addEventListener("change", () => {
		const selected = dropdown.value;
		const filtered = selected
			? allRooms.filter(r => r.shortname === selected)
			: allRooms;
		populateAvailableRooms(filtered);
	});
}

function populateAvailableRooms(rooms) {
	const list = document.getElementById("availableRoomsList");
	list.innerHTML = "";

	const sortedRooms = rooms.slice().sort((a, b) => {
		const nameA = `${a.shortname} ${a.number}`.toUpperCase();
		const nameB = `${b.shortname} ${b.number}`.toUpperCase();
		return nameA.localeCompare(nameB);
	});

	sortedRooms.forEach(room => {
		const block = document.createElement("div");
		block.className = "room-block";
		block.innerHTML = `
			<div class="room-left">${room.shortname} ${room.number}</div>
			<div class="room-right">Building: ${room.fullname}, Capacity: ${room.seats}</div>
		`;

		block.addEventListener("click", () => handleRoomSelection(room));
		list.appendChild(block);
	});
}

function handleRoomSelection(room) {
	const exists = selectedRooms.find(r => r.shortname === room.shortname && r.number === room.number);

	if (exists) {
		selectedRooms = selectedRooms.filter(r => !(r.shortname === room.shortname && r.number === room.number));
	} else {
		if (selectedRooms.length >= 5) return;
		selectedRooms.push(room);
	}

	querySelectRoom();


}



async function querySelectRoom() {
	const orConditions = selectedRooms.map(r=> {
		return {AND:[
				{IS:{"rooms_shortname": r.shortname}},
				{IS:{"rooms_number": r.number}}]};
		}
	);
	let query;
	if (selectedRooms.length === 0) {
		queryResult = [];
		updateSelectedRooms();
		updateWalkingTimes();
		return;

	} else {
		query = {
			"WHERE": {
				"OR": orConditions
			},
			"OPTIONS" : {
				"COLUMNS": [
					"rooms_fullname",
					"rooms_shortname",
					"rooms_number",
					"rooms_address",
					"rooms_seats",
					"rooms_lat",
					"rooms_lon"
				],
				"ORDER": "rooms_fullname"
			}
		};

	}

	try {
		const response = await fetch("/query", {
			method: "POST",
			headers: {"Content-Type": "application/json"},
			body:JSON.stringify(query)
			}
		);
		if (!response.ok) {
			throw new Error("Something wrong with query");
		}

		const json = await response.json();
		if (json.result) {
			queryResult = json.result;
			updateSelectedRooms();
			updateWalkingTimes();


		}

	} catch (err) {
		console.error(err);
	}
}

function updateSelectedRooms() {
	const list = document.getElementById("selectedRoomsList");
	list.innerHTML = "";

	queryResult.forEach(result => {
		const block = document.createElement("div");
		block.className = "room-block";

		const left = document.createElement("div");
		left.className = "room-left";
		left.textContent = `${result.rooms_shortname} ${result.rooms_number}`;

		const right = document.createElement("div");
		right.className = "room-right";
		right.textContent = `Building: ${result.rooms_fullname}, Address: ${result.rooms_address}, Capacity: ${result.rooms_seats}`;

		block.appendChild(left);
		block.appendChild(right);

		const room = allRooms.find(room=>room.shortname === result.rooms_shortname && room.number===result.rooms_number);

		block.addEventListener("click", () => handleRoomSelection(room));
		list.appendChild(block);
	});
}





function updateWalkingTimes() {
	const list = document.getElementById("walkingTimeList");
	list.innerHTML = "";

	for (let i = 0; i < queryResult.length; i++) {
		for (let j = i + 1; j < queryResult.length; j++) {
			const from = queryResult[i];
			const to = queryResult[j];
			const time = estimateWalkingTime(from, to);

			const item = document.createElement("li");
			item.textContent = `${from.rooms_shortname} ${from.rooms_number} ↔️ ${to.rooms_shortname} ${to.rooms_number}
			: ~${time} mins`;
			list.appendChild(item);
		}
	}
}

function estimateWalkingTime(room1, room2) {
	const R = 6371;
	const dLat = deg2rad(room2.rooms_lat - room1.rooms_lat);
	const dLon = deg2rad(room2.rooms_lon - room1.rooms_lon);
	const a =
		Math.sin(dLat / 2) ** 2 +
		Math.cos(deg2rad(room1.rooms_lat)) * Math.cos(deg2rad(room2.rooms_lat)) *
		Math.sin(dLon / 2) ** 2;
	const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
	const distance = R * c;
	return Math.round((distance / 5) * 60); // Walking speed 5km/h
}

function deg2rad(deg) {
	return deg * (Math.PI / 180);
}

function initMap(roomsData) {
	const ubcCenter = { lat: 49.261, lng: -123.249 };
	const map = new google.maps.Map(document.getElementById("map"), {
		center: ubcCenter,
		zoom: 15
	});

	const buildingsList = {};
	for (const room of roomsData) {
		if (!buildingsList[room.shortname]) {
			buildingsList[room.shortname] = {
				name: room.fullname,
				lat: room.lat,
				lon: room.lon
			};
		}
	}

	for (const name in buildingsList) {
		const building = buildingsList[name];
		new google.maps.Marker({
			position: { lat: building.lat, lng: building.lon },
			map,
			title: `${building.name}`
		});
	}
}
// end of code generated by ChatGPT
