import { expect } from "chai";
import request from "supertest";
import { StatusCodes } from "http-status-codes";
import { Log } from "@ubccpsc310/project-support";
import Server from "../../src/rest/Server";
import * as fs from "fs-extra";
import { InsightDatasetKind } from "../../src/controller/IInsightFacade";

describe("Facade C3", function () {
	//start of code generated by ChatGPT
	let server: Server;

	before(async function () {
		server = new Server(4321);
		try {
			await server.start();
		} catch (err) {
			expect.fail(`Server can not start because of unexpected error: ${err}`);
		}
	});
	//end of code generated by ChatGPT

	after(async function () {
		try {
			await server.stop();
		} catch (err) {
			expect.fail(`Server can not stop because of unexpected error: ${err}`);
		}
	});

	beforeEach(function () {
		// might want to add some process logging here to keep track of what is going on
	});

	afterEach(async function () {
		await fs.remove("./data"); // might want to add some process logging here to keep track of what is going on
	});

	// Sample on how to format PUT requests
	it("PUT test for courses dataset", async function () {
		const SERVER_URL = "http://localhost:4321";
		const ENDPOINT_URL = "/dataset/ubc/sections";
		const ZIP_FILE_DATA = await fs.readFile("test/resources/archives/pair.zip");

		try {
			const res = await request(SERVER_URL)
				.put(ENDPOINT_URL)
				.send(ZIP_FILE_DATA)
				.set("Content-Type", "application/x-zip-compressed");
			expect(res.status).to.be.equal(StatusCodes.OK);
			//start of code generated by ChatGPT
			expect(res.body.result).to.deep.equal(["ubc"]);
			//end of code generated by ChatGPT
		} catch (err) {
			Log.error(err);
			expect.fail();
		}
	});

	it("PUT test for courses dataset fail for kind", async function () {
		const SERVER_URL = "http://localhost:4321";
		const ENDPOINT_URL = "/dataset/ubc/section";
		const ZIP_FILE_DATA = await fs.readFile("test/resources/archives/pair.zip");

		try {
			const res = await request(SERVER_URL)
				.put(ENDPOINT_URL)
				.send(ZIP_FILE_DATA)
				.set("Content-Type", "application/x-zip-compressed");
			expect(res.status).to.be.equal(400);
		} catch (err) {
			Log.error(err);
			expect.fail();
		}
	});

	it("PUT test for courses dataset fail for error", async function () {
		const SERVER_URL = "http://localhost:4321";
		const ENDPOINT_URL = "/dataset/my_Course/sections";
		const ZIP_FILE_DATA = await fs.readFile("test/resources/archives/pair.zip");

		try {
			const res = await request(SERVER_URL)
				.put(ENDPOINT_URL)
				.send(ZIP_FILE_DATA)
				.set("Content-Type", "application/x-zip-compressed");
			expect(res.status).to.be.equal(400);
		} catch (err) {
			Log.error(err);
			expect.fail();
		}
	});

	it("delete test for courses dataset", async function () {
		const SERVER_URL = "http://localhost:4321";
		const ENDPOINT_URL = "/dataset/ubc/sections";
		const ZIP_FILE_DATA = await fs.readFile("test/resources/archives/pair.zip");
		//start of code generated by ChatGPT
		try {
			await request(SERVER_URL)
				.put(ENDPOINT_URL)
				.send(ZIP_FILE_DATA)
				.set("Content-Type", "application/x-zip-compressed");

			const res = await request(SERVER_URL).delete("/dataset/ubc");

			expect(res.status).to.be.equal(StatusCodes.OK);
			expect(res.body.result).to.deep.equal("ubc");
		} catch (err) {
			Log.error(err);
			expect.fail();
		}
		//end of code generated by ChatGPT
	});

	it("delete test for courses dataset fail for non-found", async function () {
		const SERVER_URL = "http://localhost:4321";
		const ENDPOINT_URL = "/dataset/ubc/sections";
		const ZIP_FILE_DATA = await fs.readFile("test/resources/archives/pair.zip");

		try {
			await request(SERVER_URL)
				.put(ENDPOINT_URL)
				.send(ZIP_FILE_DATA)
				.set("Content-Type", "application/x-zip-compressed");

			const res = await request(SERVER_URL).delete("/dataset/yourCourse");

			expect(res.status).to.be.equal(404);
		} catch (err) {
			Log.error(err);
			expect.fail();
		}
	});

	it("delete test for courses dataset fail for error", async function () {
		const SERVER_URL = "http://localhost:4321";
		const ENDPOINT_URL = "/dataset/ubc/sections";
		const ZIP_FILE_DATA = await fs.readFile("test/resources/archives/pair.zip");

		try {
			await request(SERVER_URL)
				.put(ENDPOINT_URL)
				.send(ZIP_FILE_DATA)
				.set("Content-Type", "application/x-zip-compressed");

			const res = await request(SERVER_URL).delete("/dataset/my_Course");

			expect(res.status).to.be.equal(400);
		} catch (err) {
			Log.error(err);
			expect.fail();
		}
	});

	it("get test for courses dataset", async function () {
		const SERVER_URL = "http://localhost:4321";
		const ENDPOINT_URL = "/dataset/ubc/sections";
		const ZIP_FILE_DATA = await fs.readFile("test/resources/archives/pair.zip");

		try {
			await request(SERVER_URL)
				.put(ENDPOINT_URL)
				.send(ZIP_FILE_DATA)
				.set("Content-Type", "application/x-zip-compressed");
			//start of code generated by ChatGPT
			const res = await request(SERVER_URL).get("/datasets");
			//end of code generated by ChatGPT
			expect(res.status).to.be.equal(StatusCodes.OK);
			expect(res.body.result).to.deep.equal([{ id: "ubc", kind: InsightDatasetKind.Sections, numRows: 64612 }]);
		} catch (err) {
			Log.error(err);
			expect.fail();
		}
	});

	it("post test for courses dataset", async function () {
		const SERVER_URL = "http://localhost:4321";
		const ENDPOINT_URL = "/dataset/sections/sections";
		const ZIP_FILE_DATA = await fs.readFile("test/resources/archives/pair.zip");
		const query = await fs.readJSON("test/resources/queries/valid/simple.json");

		try {
			await request(SERVER_URL)
				.put(ENDPOINT_URL)
				.send(ZIP_FILE_DATA)
				.set("Content-Type", "application/x-zip-compressed");

			const res = await request(SERVER_URL).post("/query").send(query.input);

			expect(res.status).to.be.equal(StatusCodes.OK);
			expect(res.body.result).to.have.deep.members(query.expected);
		} catch (err) {
			Log.error(err);
			expect.fail();
		}
	});

	it("post test for courses dataset for error", async function () {
		const SERVER_URL = "http://localhost:4321";
		const ENDPOINT_URL = "/dataset/sections/sections";
		const ZIP_FILE_DATA = await fs.readFile("test/resources/archives/pair.zip");
		const query = await fs.readJSON("test/resources/queries/invalid/capitalization.json");

		try {
			await request(SERVER_URL)
				.put(ENDPOINT_URL)
				.send(ZIP_FILE_DATA)
				.set("Content-Type", "application/x-zip-compressed");

			const res = await request(SERVER_URL).post("/query").send(query.input);

			expect(res.status).to.be.equal(400);
		} catch (err) {
			Log.error(err);
			expect.fail();
		}
	});

	// The other endpoints work similarly. You should be able to find all instructions in the supertest documentation
});
